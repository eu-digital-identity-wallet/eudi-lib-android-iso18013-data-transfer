import com.github.jk1.license.filter.ExcludeTransitiveDependenciesFilter
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.filter.ReduceDuplicateLicensesFilter
import com.github.jk1.license.render.InventoryMarkdownReportRenderer

plugins {
    alias libs.plugins.android.library
    alias libs.plugins.kotlin.android
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    alias libs.plugins.dokka
    alias libs.plugins.dependency.license.report
}

def meta = [
        namespace   : 'eu.europa.ec.eudi.iso18013.transfer',
        groupId     : 'eu.europa.ec.eudi',
        artifactId  : 'eudi-lib-android-iso18013-data-transfer',
        version     : '1.0.0',
        description : 'EUDI ISO 18013-5 document transfer library',
        orgUrl      : 'https://github.com/eu-digital-identity-wallet',
        baseUrl     : 'https://github.com/eu-digital-identity-wallet/eudi-lib-android-iso18013-data-transfer',
        gitUrl      : 'scm:git:git@github.com:eu-digital-identity-wallet/eudi-lib-android-iso18013-data-transfer.git',
        sshUrl      : 'scm:git:ssh://github.com:eu-digital-identity-wallet/eudi-lib-android-iso18013-data-transfer.git',
        snapshotsUrl: 'https://s01.oss.sonatype.org/content/repositories/snapshots/',
        ReleasesUrl : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
]

android {
    namespace meta.namespace
    version meta.version
    group meta.groupId
    compileSdk 33

    defaultConfig {
        minSdk 26
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testApplicationId "eu.europa.ec.eudi.iso18013.transfer.test"
        testHandleProfiling true
        testFunctionalTest true

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.toVersion(libs.versions.java.get())
        targetCompatibility JavaVersion.toVersion(libs.versions.java.get())
    }
    kotlinOptions {
        jvmTarget = libs.versions.java.get()
    }
}

dependencies {

    // Google library
    implementation libs.identity.credential
    implementation libs.android.identity.credential

    implementation libs.biometric.ktx

    // Zxing for qr code
    implementation libs.zxing.core

    // Bouncy Castle
    implementation libs.bouncy.castle.prov
    implementation libs.bouncy.castle.pkix

    testImplementation libs.junit
    testImplementation libs.mockk
    testImplementation libs.mockito.inline
    testImplementation libs.mockito.kotlin

    androidTestImplementation libs.android.junit
    androidTestImplementation libs.espresso.core
}

tasks.register("clearDocsDir", Delete.class) {
    delete(file("$rootDir/docs"))
}

dokkaGfm.dependsOn("clearDocsDir")
dokkaGfm {
    outputDirectory.set(file("$rootDir/docs"))
}

licenseReport {
    unionParentPomLicenses = false
    filters = [new LicenseBundleNormalizer(), new ReduceDuplicateLicensesFilter(), new ExcludeTransitiveDependenciesFilter()]
    configurations = ['releaseRuntimeClasspath']
    excludeBoms = true
    excludeOwnGroup = true
    renderers = [new InventoryMarkdownReportRenderer("licenses.md", "${meta.description}")]
}

tasks.register('copyLicenseReport', Copy) {
    from "$buildDir/reports/dependency-license/licenses.md"
    into "$rootDir"
    dependsOn 'generateLicenseReport'
}
generateLicenseReport.finalizedBy("copyLicenseReport")
build.finalizedBy("generateLicenseReport", "dokkaGfm")

tasks.register('dokkaHtmlJar', Jar.class) {
    dependsOn(dokkaHtml)
    from(dokkaHtml)
    archiveClassifier.set("html-docs")
}

tasks.register('dokkaJavadocJar', Jar.class) {
    dependsOn(dokkaJavadoc)
    from(dokkaJavadoc)
    archiveClassifier.set("javadoc")
}